{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bengarlock/WebstormProjects/portfolio_website_v2/src/Containers/Home.js\";\nimport React from 'react';\nimport \"../stylesheets/Home.css\";\nimport Circles from \"../Cards/Circles\";\n\nclass Home extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      circles: \"\"\n    };\n\n    this.genRandomNumberRange = (min, max) => {\n      return Math.floor(Math.random() * (min + max) + min);\n    };\n\n    this.rotate = index => {\n      const boxes = document.querySelectorAll(\"div.circle\");\n      boxes.forEach(box => {\n        box.style.transform = \"rotate\" + `(${String(Number(box.dataset.rotationStart) + Number(box.dataset.rotationSpeed) * index / 8)}deg)`;\n      });\n    };\n\n    this.genCircles = () => {\n      let circleList = [];\n      let index = 1;\n\n      while (index < 25) {\n        let min = Math.ceil(2);\n        let max = Math.floor(3);\n        let circle = {\n          id: index,\n          className: \"circle\",\n          size: String(this.genRandomNumberRange(100, 2000)) + \"px\",\n          rotation_start: Math.floor(Math.random() * Math.floor(360)),\n          rotation_speed: String(Math.floor(Math.random() * (min + max) + min)),\n          stars: []\n        };\n        let starIndex = 0;\n        let stars = [];\n\n        while (starIndex < 200) {\n          const colors = ['#1175ff', '#bbff00', '#37cbff', '#1b91f5', '#6ea1e2', '#602ed7'];\n          let star = {\n            id: starIndex,\n            class_name: \"star5px\",\n            left: String(this.genRandomNumberRange(1, 100)) + \"%\",\n            top: String(this.genRandomNumberRange(1, 100)) + \"%\",\n            background_color: `${String(colors[this.genRandomNumberRange(0, 6)])}`\n          };\n          stars.push(star);\n          starIndex++;\n        }\n\n        circle.stars = stars;\n        circleList.push(circle);\n        index++;\n      }\n\n      return circleList;\n    };\n\n    this.renderCircles = () => {\n      const circles = this.genCircles();\n      return circles.map(circle => /*#__PURE__*/_jsxDEV(Circles, {\n        circle: circle\n      }, circle.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 38\n      }, this));\n    };\n\n    this.runRotate = () => {\n      let index = 0;\n\n      while (index < Infinity) {\n        // new Promise(r => setTimeout(r, 150));\n        this.rotate(index);\n        index++;\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      circles: this.genCircles()\n    });\n  }\n\n  render() {\n    // console.log(this.genCircles())\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"home\",\n      children: this.renderCircles()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/bengarlock/WebstormProjects/portfolio_website_v2/src/Containers/Home.js"],"names":["React","Circles","Home","Component","state","circles","genRandomNumberRange","min","max","Math","floor","random","rotate","index","boxes","document","querySelectorAll","forEach","box","style","transform","String","Number","dataset","rotationStart","rotationSpeed","genCircles","circleList","ceil","circle","id","className","size","rotation_start","rotation_speed","stars","starIndex","colors","star","class_name","left","top","background_color","push","renderCircles","map","runRotate","Infinity","componentDidMount","setState","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport \"../stylesheets/Home.css\"\nimport Circles from \"../Cards/Circles\";\n\nclass Home extends React.Component {\n\n    state = {\n        circles: \"\"\n    }\n\n    componentDidMount() {\n        this.setState({\n            circles: this.genCircles()\n        })\n    }\n\n    genRandomNumberRange = (min, max) => {\n        return Math.floor(Math.random() * (min + max) + min)\n    }\n\n    rotate = (index) => {\n        const boxes = document.querySelectorAll(\"div.circle\")\n        boxes.forEach(box => {\n            box.style.transform = \"rotate\" +\n                `(${String(Number(box.dataset.rotationStart) +\n                    Number(box.dataset.rotationSpeed) * index /8)}deg)`\n        })\n    }\n\n    genCircles = () => {\n        let circleList = []\n        let index = 1\n        while (index < 25) {\n            let min = Math.ceil(2);\n            let max = Math.floor(3);\n\n            let circle = {\n                id: index,\n                className: \"circle\",\n                size: String(this.genRandomNumberRange(100, 2000)) + \"px\",\n                rotation_start: Math.floor(Math.random() * Math.floor(360)),\n                rotation_speed: String(Math.floor(Math.random() * (min + max) + min)),\n                stars: []\n            }\n\n            let starIndex = 0\n            let stars = []\n            while (starIndex < 200) {\n                const colors = [\n                    '#1175ff',\n                    '#bbff00',\n                    '#37cbff',\n                    '#1b91f5',\n                    '#6ea1e2',\n                    '#602ed7']\n\n                let star = {\n                    id: starIndex,\n                    class_name: \"star5px\",\n                    left: String(this.genRandomNumberRange(1, 100)) + \"%\",\n                    top: String(this.genRandomNumberRange(1, 100)) + \"%\",\n                    background_color: `${String(colors[this.genRandomNumberRange(0, 6)])}`\n                }\n                stars.push(star)\n                starIndex++\n            }\n            circle.stars = stars\n\n            circleList.push(circle)\n            index++\n        }\n        return circleList\n    }\n\n    renderCircles = () => {\n        const circles = this.genCircles()\n        return circles.map(circle => <Circles key={circle.id} circle={circle}/>)\n    }\n\n    runRotate = () => {\n        let index = 0\n        while (index < Infinity) {\n            // new Promise(r => setTimeout(r, 150));\n            this.rotate(index)\n            index++\n        }\n    }\n\n    render(){\n        // console.log(this.genCircles())\n        return(\n            <div id=\"home\">{this.renderCircles()}</div>\n        )\n    }\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}